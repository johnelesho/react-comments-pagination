{"version":3,"sources":["components/Comments.js","components/Pagination.js","App.js","serviceWorker.js","index.js"],"names":["Comments","comments","loading","styles","width","height","float","map","comment","key","id","className","style","src","class","alt","title","body","href","Pagination","commentsPerPage","totalComments","paginate","pageNumbers","i","Math","ceil","push","display","number","onClick","App","useState","setComments","setLoading","currentPage","setCurrentPage","useEffect","a","axios","get","res","data","fetchComments","indexOfLastComment","indexOfFirstComment","currentComments","slice","length","pageNumber","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+TAyBeA,EAvBE,SAAC,GAAyB,IAAxBC,EAAuB,EAAvBA,SACnB,GAD0C,EAAbC,QAEzB,OAAO,yCAEX,IAAMC,EAAS,CAACC,MAAO,QAASC,OAAO,QAAS,OAAS,mBAAoBC,MAAM,QAC/E,OACQ,6BACKL,EAASM,KAAI,SAAAC,GAAO,OACjB,yBAAKC,IAAKD,EAAQE,GAAIC,UAAU,OAAOC,MAAOT,GAC9C,yBAAKU,IAAI,yBAAyBC,MAAM,eAAeC,IAAI,QAC3D,yBAAKD,MAAM,aACT,wBAAIA,MAAM,cAAcN,EAAQQ,OAChC,uBAAGF,MAAM,aAAaN,EAAQS,MAC9B,uBAAGC,KAAK,IAAIJ,MAAM,mBAAlB,oBCQPK,EArBK,SAAC,GAGjB,IAHiE,IAA/CC,EAA8C,EAA9CA,gBAAiBC,EAA6B,EAA7BA,cAAeC,EAAc,EAAdA,SAC5CC,EAAc,GAEZC,EAAI,EAAGA,GAAGC,KAAKC,KAAKL,EAAgBD,GAAiBI,IACjED,EAAYI,KAAKH,GAGb,OACG,yBAAKZ,MAFM,CAAEgB,QAAU,UAGnB,wBAAIjB,UAAU,cACRY,EAAYhB,KAAI,SAAAsB,GAAM,OACnB,wBAAIpB,IAAKoB,EAAQlB,UAAU,aACvB,uBAAGmB,QAAS,kBAAKR,EAASO,IAASX,KAAK,KAAKP,UAAU,aAClDkB,EADL,YC6BTE,G,MArCJ,WAAM,IAAD,EACkBC,mBAAS,IAD3B,mBACP/B,EADO,KACGgC,EADH,OAEgBD,oBAAS,GAFzB,mBAEP9B,EAFO,KAEEgC,EAFF,OAGwBF,mBAAS,GAHjC,mBAGPG,EAHO,KAGMC,EAHN,OAIYJ,mBAAS,IAA5BZ,EAJO,oBAMdiB,qBAAU,YACW,uCAAG,4BAAAC,EAAA,6DACpBJ,GAAW,GADS,SAEFK,IAAMC,IAAI,iDAFR,OAEdC,EAFc,OAGpBR,EAAYQ,EAAIC,MAChBR,GAAW,GAJS,2CAAH,qDAMnBS,KACC,IAIH,IAAMC,EAAqBT,EAAcf,EACnCyB,EAAsBD,EAAqBxB,EAC3C0B,EAAkB7C,EAAS8C,MAAMF,EAAqBD,GAG5D,OACE,yBAAKjC,UAAU,mBACb,yBAAKA,UAAU,aACf,wBAAIG,MAAM,aAAV,uBACE,uBAAGH,UAAU,QAAb,uGAEF,wBAAIA,UAAU,qBAAd,qBACA,kBAAC,EAAD,CAAYS,gBAAiBA,EAAiBC,cAAepB,EAAS+C,OAAQ1B,SARnE,SAAA2B,GAAU,OAAIb,EAAea,MASxC,kBAAC,EAAD,CAAUhD,SAAU6C,EAAiB5C,QAASA,OCzBhCgD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1f9af03a.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Comments = ({comments, loading}) => {\r\nif(loading){\r\n    return <h2>Loading..</h2>\r\n}\r\nconst styles = {width: '20rem', height:'37rem', 'margin':'0 2rem 3rem 0rem', float:'left'};\r\n    return(\r\n            <div> \r\n                {comments.map(comment =>(\r\n                    <div key={comment.id} className=\"card\" style={styles}>\r\n                    <img src=\"images/placeholder.png\" class=\"card-img-top\" alt=\"...\"/>\r\n                    <div class=\"card-body\">\r\n                      <h5 class=\"card-title\">{comment.title}</h5>\r\n                      <p class=\"card-text\">{comment.body}</p>\r\n                      <a href=\"#\" class=\"btn btn-primary\">Read more</a>\r\n                    </div>\r\n                  </div>\r\n                 \r\n                    \r\n                ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Comments;","import React from 'react'\r\n\r\nconst  Pagination = ({commentsPerPage, totalComments, paginate}) => {\r\n    const pageNumbers = [];\r\n\r\n    for(let i = 1; i<=Math.ceil(totalComments / commentsPerPage);i++){\r\npageNumbers.push(i);\r\n    }\r\n    const style = { display : 'block'};\r\n    return (\r\n       <nav style={style}>\r\n           <ul className=\"pagination\">\r\n                {pageNumbers.map(number =>(\r\n                    <li key={number} className=\"page-item\">\r\n                        <a onClick={()=> paginate(number)} href=\"!#\" className=\"page-link\">\r\n                            {number} </a>\r\n                    </li>\r\n                ))}\r\n           </ul>\r\n       </nav>\r\n    )\r\n}\r\n\r\nexport default Pagination;","import React, {useState, useEffect} from 'react';\nimport axios from 'axios';\nimport Comments from './components/Comments';\nimport Pagination from './components/Pagination';\nimport './App.css';\n\nconst App =() =>{\n  const [comments, setComments] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [commentsPerPage] = useState(15);\n\n  useEffect(() =>{\n    const fetchComments = async()=>{\n      setLoading(true);\n      const res = await axios.get('https://jsonplaceholder.typicode.com/comments');\n      setComments(res.data);\n      setLoading(false);\n    }\n    fetchComments();\n  }, []);\n\n  //Get current comments\n\n  const indexOfLastComment = currentPage * commentsPerPage;\n  const indexOfFirstComment = indexOfLastComment - commentsPerPage;\n  const currentComments = comments.slice(indexOfFirstComment, indexOfLastComment);\n  //change Page\nconst paginate = pageNumber => setCurrentPage(pageNumber);\n  return (\n    <div className=\"container-fluid\">\n      <div className=\"jumbotron\">\n      <h1 class=\"display-4\">Comments Pagination</h1>\n        <p className=\"lead\"> A sample react project that calls an external API. It fetches data from jsonplaceholder websites.</p>\n      </div>\n      <h1 className=\"text-primary mb-3\"> My Blog comments</h1>\n      <Pagination commentsPerPage={commentsPerPage} totalComments={comments.length} paginate={paginate} />\n      <Comments comments={currentComments} loading={loading} />\n      \n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}